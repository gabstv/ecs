// Code generated by ecs https://github.com/gabstv/ecs; DO NOT EDIT.

package {{.Package}}

import (
    "sort"
    {{if .Async}}"sync"{{end}}

    "github.com/gabstv/ecs/v2"
)

{{$type := (printf "%sComponent" .Name)}}
{{$cap := (or .Vars.Cap "256")}}
{{$uuid := (or .Vars.UUID $type)}}
{{$drawertype := (printf "drawer%s" $type)}}
{{$drawertypeslc := (printf "slcdrawer%s" $type)}}
{{$watchertype := (printf "Watch%s" .Name)}}

const uuid{{$type}} = "{{$uuid}}"
const cap{{$type}} = {{$cap}}

type {{$drawertype}} struct {
    Entity ecs.Entity
    Data   {{.Name}}
}

// {{$watchertype}} is a helper struct to access a valid pointer of {{.Name}}
type {{$watchertype}} interface {
    Entity() ecs.Entity
    Data() *{{.Name}}
}

type {{$drawertypeslc}} []{{$drawertype}}
func (a {{$drawertypeslc}}) Len() int           { return len(a) }
func (a {{$drawertypeslc}}) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a {{$drawertypeslc}}) Less(i, j int) bool { return a[i].Entity < a[j].Entity }


type m{{$watchertype}} struct {
    c *{{$type}}
    entity ecs.Entity
}

func (w *m{{$watchertype}}) Entity() ecs.Entity {
    return w.entity
}

func (w *m{{$watchertype}}) Data() *{{.Name}} {
    {{if .Async}}w.c.l.RLock(){{end}}
    {{if .Async}}defer w.c.l.RUnlock(){{end}}
    id := w.c.indexof(w.entity)
    if id == -1 {
        return nil
    }
    return &w.c.data[id].Data
}

// {{$type}} implements ecs.BaseComponent
type {{$type}} struct {
    initialized bool
    flag        ecs.Flag
    world       ecs.BaseWorld
    wkey        [4]byte
    data        []{{$drawertype}}
    {{if .Async}}l           sync.RWMutex{{end}}
}

// Get{{$type}} returns the instance of the component in a World
func Get{{$type}}(w ecs.BaseWorld) *{{$type}} {
    return w.C(uuid{{$type}}).(*{{$type}})
}

// Set{{$type}}Data updates/adds a {{.Name}} to Entity e
func Set{{$type}}Data(w ecs.BaseWorld, e ecs.Entity, data {{.Name}}) {
    Get{{$type}}(w).Upsert(e, data)
}

// Get{{$type}}Data gets the *{{.Name}} of Entity e
func Get{{$type}}Data(w ecs.BaseWorld, e ecs.Entity) *{{.Name}} {
    return Get{{$type}}(w).Data(e)
}

// Watch{{$type}}Data gets a pointer getter of an entity's {{.Name}}.
//
// The pointer must not be stored because it may become invalid overtime.
func Watch{{$type}}Data(w ecs.BaseWorld, e ecs.Entity) {{$watchertype}} {
    return &m{{$watchertype}}{
        c: Get{{$type}}(w),
        entity: e,
    }
}

// UUID implements ecs.BaseComponent
func ({{$type}}) UUID() string {
    return "{{$uuid}}"
}

// Name implements ecs.BaseComponent
func ({{$type}}) Name() string {
    return "{{$type}}"
}

func (c *{{$type}}) indexof(e ecs.Entity) int {
    i := sort.Search(len(c.data), func(i int) bool { return c.data[i].Entity >= e })
    if i < len(c.data) && c.data[i].Entity == e {
        return i
    }
    return -1
}

// Upsert creates or updates a component data of an entity.
// Not recommended to be used directly. Use Set{{$type}}Data to change component
// data outside of a system loop.
func (c *{{$type}}) Upsert(e ecs.Entity, data interface{}) {
    v, ok := data.({{.Name}})
    if !ok {
        panic("data must be {{.Name}}")
    }
    {{if .Async}}c.l.RLock(){{end}}
    id := c.indexof(e)
    {{if .Async}}c.l.RUnlock(){{end}}
    if id > -1 {
        {{if .Async}}c.l.Lock(){{end}}
        dwr := &c.data[id]
        dwr.Data = v
        {{if .Async}}c.l.Unlock(){{end}}
        return
    }
    {{if .Async}}c.l.Lock(){{end}}
    rsz := false
    if cap(c.data) == len(c.data) {
        rsz = true
    }
    newindex := len(c.data)
    c.data = append(c.data, {{$drawertype}}{
        Entity: e,
        Data:   v,
    })
    if len(c.data) > 1 {
        if c.data[newindex].Entity < c.data[newindex-1].Entity {
            sort.Sort({{$drawertypeslc}}(c.data))
            rsz = true
        }
    }
    {{if .Async}}c.l.Unlock(){{end}}
    if rsz {
        {{if .Vars.OnResize}}{{.Vars.OnResize}}{{end}}
        c.world.CResized(c, c.wkey)
        c.world.Dispatch(ecs.Event{
            Type: ecs.EvtComponentsResized,
            ComponentName: "{{$type}}",
            ComponentID: "{{$uuid}}",
        })
    }
    {{if .Vars.OnAdd}}{{.Vars.OnAdd}}{{end}}
    c.world.CAdded(e, c, c.wkey)
    c.world.Dispatch(ecs.Event{
        Type: ecs.EvtComponentAdded,
        ComponentName: "{{$type}}",
        ComponentID: "{{$uuid}}",
        Entity: e,
    })
}

// Remove a {{.Name}} data from entity e
//
{{if .Async}}{{else}}// Warning: DO NOT call remove inside the system entities loop{{end}}
func (c *{{$type}}) Remove(e ecs.Entity) {
    {{if .Async}}c.l.Lock(){{end}}
    {{if .Async}}defer c.l.Unlock(){{end}}
    i := c.indexof(e)
    if i == -1 {
        return
    }
    {{if .Vars.BeforeRemove}}{{.Vars.BeforeRemove}}{{end}}
    //c.data = append(c.data[:i], c.data[i+1:]...)
    c.data = c.data[:i+copy(c.data[i:], c.data[i+1:])]
    c.world.CRemoved(e, c, c.wkey)
    {{if .Vars.OnRemove}}{{.Vars.OnRemove}}{{end}}
    c.world.Dispatch(ecs.Event{
        Type: ecs.EvtComponentRemoved,
        ComponentName: "{{$type}}",
        ComponentID: "{{$uuid}}",
        Entity: e,
    })
}

func (c *{{$type}}) Data(e ecs.Entity) *{{.Name}} {
    {{if .Async}}c.l.RLock(){{end}}
    {{if .Async}}defer c.l.RUnlock(){{end}}
    index := c.indexof(e)
    if index > -1 {
        return &c.data[index].Data
    }
    return nil
}

// Flag returns the 
func (c *{{$type}}) Flag() ecs.Flag {
    return c.flag
}

// Setup is called by ecs.BaseWorld
//
// Do not call this directly
func (c *{{$type}}) Setup(w ecs.BaseWorld, f ecs.Flag, key [4]byte) {
    if c.initialized {
        panic("{{$type}} called Setup() more than once")
    }
    c.flag = f
    c.world = w
    c.wkey = key
    c.data = make([]{{$drawertype}}, 0, {{$cap}})
    c.initialized = true
}

{{if not .SkipRegister}}
func init() {
    ecs.RegisterComponent(func() ecs.BaseComponent {
        return &{{$type}}{}
    })
}
{{end}}